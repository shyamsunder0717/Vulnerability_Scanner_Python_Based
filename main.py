import tkinter as tk
from tkinter import messagebox
from tkinter import scrolledtext

import csrf
import robots_txt
import sql_injection
import xss_vulnerability_check

class VulnerabilityScannerApp:
    def __init__(self, master):
        self.master = master
        master.title("Vulnerability Scanner")

        # URL Entry
        self.label_url = tk.Label(master, text="Enter URL:")
        self.label_url.pack()
        self.url_entry = tk.Entry(master, width=50)
        self.url_entry.pack()

        # Checkboxes for vulnerability checks
        self.var_robots = tk.BooleanVar()
        self.var_sql_injection = tk.BooleanVar()
        self.var_xss = tk.BooleanVar()
        self.var_csrf = tk.BooleanVar()

        self.checkbutton_robots = tk.Checkbutton(master, text="Check Robots.txt", variable=self.var_robots)
        self.checkbutton_robots.pack()

        self.checkbutton_sql_injection = tk.Checkbutton(master, text="Check SQL Injection", variable=self.var_sql_injection)
        self.checkbutton_sql_injection.pack()

        self.checkbutton_xss = tk.Checkbutton(master, text="Check XSS", variable=self.var_xss)
        self.checkbutton_xss.pack()

        self.checkbutton_csrf = tk.Checkbutton(master, text="Check CSRF", variable=self.var_csrf)
        self.checkbutton_csrf.pack()

        # Scan Button
        self.scan_button = tk.Button(master, text="Scan", command=self.scan_url)
        self.scan_button.pack()

        # Result Text
        self.result_text = scrolledtext.ScrolledText(master, width=80, height=20)
        self.result_text.pack()

    def scan_url(self):
        url = self.url_entry.get()
        if not url:
            messagebox.showerror("Error", "Please enter a URL")
            return

        self.result_text.delete(1.0, tk.END)  # Clear previous content

        # Check selected checkboxes and perform corresponding vulnerability checks
        if self.var_robots.get():
            robots_txt_content = robots_txt.check_robots_txt(url)
            self.result_text.insert(tk.END, "Robots.txt Check Result:\n")
            self.result_text.insert(tk.END, robots_txt_content + "\n\n")

        if self.var_sql_injection.get():
            sql_injection_result = sql_injection.scan_sql(url)
            self.result_text.insert(tk.END, "SQL Injection Scan Result:\n")
            self.result_text.insert(tk.END, sql_injection_result + "\n\n")


        if self.var_xss.get():
            xss_vulnerability_result = xss_vulnerability_check.scan_xss(url)
            self.result_text.insert(tk.END, "XSS Vulnerability Check Result:  ")
            if xss_vulnerability_result is not None:
                self.result_text.insert(tk.END, "Found \n")
                self.result_text.insert(tk.END, str(xss_vulnerability_result) + "\n\n")
            else:
                self.result_text.insert(tk.END, " No XSS vulnerabilities found.\n\n")

        if self.var_csrf.get():
            csrf_result = csrf.csrf_scan(url)
            self.result_text.insert(tk.END, " CSRF : \n")
            self.result_text.insert(tk.END, csrf_result + "\n\n")

def main():
    root = tk.Tk()
    app = VulnerabilityScannerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
